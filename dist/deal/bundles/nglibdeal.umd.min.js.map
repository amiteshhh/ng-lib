{"version":3,"sources":["ng://nglibdeal/lib/deal.service.ts","ng://nglibdeal/environment.ts","ng://nglibdeal/lib/deal.component.ts","ng://nglibdeal/lib/my-material.module.ts","ng://nglibdeal/lib/deal-details/deal-details.component.ts","ng://nglibdeal/lib/deal.module.ts"],"names":["DealService","Injectable","args","providedIn","environment","environments","DEV","envCode","BASE_URL","PROD","DealComponent","prototype","openSnackBar","this","_snackBar","open","ngOnInit","Component","selector","template","MatSnackBar","components","MatButtonModule","MatMenuModule","MatSnackBarModule","MatCardModule","MyMaterialModule","NgModule","imports","exports","DealDetailsComponent","DealModule","configEnv","defaults","validEnvCodes","Object","keys","includes","assign","declarations"],"mappings":"qlBAAA,IAAAA,uBAECC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,uJAIZ,SAAAH,KCCF,IAAWI,EAA0B,GAC1BC,EAAe,CACtBC,IAAK,CACDC,QAAS,MACTC,SAAU,uBAEdC,KAAM,CACFF,QAAS,OACTC,SAAU,yBChBlBE,GAwBEA,EAAAC,UAAAC,aAAA,WACEC,KAAKC,UAAUC,KAAK,uCAAwC,OAG9DL,EAAAC,UAAAK,SAAA,iCAxBDC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,UACVC,SAAU,qRASD,4FAbFC,EAAAA,eA6BTV,GATE,SAAAA,EAAoBI,GAAAD,KAAAC,UAAAA,EAJpBD,KAAAT,YAAcA,MCXZiB,EAAa,CAACC,EAAAA,gBAAiBC,EAAAA,cAAeC,EAAAA,kBAAmBC,EAAAA,eACrEC,uBAACC,EAAAA,SAAQzB,KAAA,CAAC,CACN0B,QAASP,EACTQ,QAASR,MAGbK,GALA,SAAAA,KCRA,IAAAI,GAcEA,EAAAnB,UAAAK,SAAA,iCAXDC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,mjCAYFW,GALE,SAAAA,IAFAjB,KAAAN,QAAUH,EAAYG,QACtBM,KAAAL,SAAWJ,EAAYI,aCHrBa,EAAa,CAACX,EAAeoB,GACjCC,GAegBA,EAAAC,UAAd,SAAwBzB,EAAgB0B,OAClCC,EAAgBC,OAAOC,KAAK/B,GAChC,IAAK6B,EAAcG,SAAS9B,GAC1B,KAAM,oCAAoCA,EAAO,yDAAyD2B,EAAa,2CAEzHC,OAAOG,OAAOlC,EAAaC,EAAaE,GAAU0B,wBApBrDN,EAAAA,SAAQzB,KAAA,CAAC,CACRqC,aAAclB,EACdO,QAAS,CACPF,GAEFG,QAASR,MAiBXU,GAtBA,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DealService {\n\n  constructor() { }\n}\n","export interface envConfigI {\r\n    //interface exported to resolve build issue => projects/deal/src/lib/deal.component.ts(19,3): error TS4029: Public property 'environment' of exported class has or is using name 'envConfigI'\r\n    //from external module \"D:/dev/deal-lib/projects/deal/src/environment\" but cannot be named.\r\n    /** 'DEV'|'PROD' etc */\r\n    envCode?: string,\r\n    BASE_URL?: string,\r\n}\r\n\r\nexport var environment: envConfigI = {};//will be updated to environment val from below \r\nexport var environments = {\r\n    DEV: {\r\n        envCode: 'DEV',\r\n        BASE_URL: 'http://deal.dev.com'\r\n    },\r\n    PROD: {\r\n        envCode: 'PROD',\r\n        BASE_URL: 'http://deal.prod.com'\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\nimport { environment } from '../environment'\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'dl-deal',\n  template: `\n    <h2>I am dl-deal new component </h2>\n    <div>Environment: {{environment.envCode}}</div>\n    <button mat-button (click)=\"openSnackBar()\">Click me!</button>\n    <div>Base Url: {{environment.BASE_URL}}</div>\n    <p>\n      deal works each time!\n    </p>\n  `,\n  styles: [':host{border: 1px solid gray;display:block}']\n})\nexport class DealComponent implements OnInit {\n  environment = environment;\n  \n  // envCode = environment.envCode;\n  // BASE_URL = environment.BASE_URL;\n  constructor(private _snackBar: MatSnackBar) {\n  }\n  openSnackBar() {\n    this._snackBar.open('Hey its just a message from material', 'OK');\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\nvar components = [MatButtonModule, MatMenuModule, MatSnackBarModule, MatCardModule]\r\n@NgModule({\r\n    imports: components,\r\n    exports: components\r\n})\r\nexport class MyMaterialModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { environment } from '../../environment'\n\n@Component({\n  selector: 'dl-deal-details',\n  templateUrl: './deal-details.component.html',\n  styleUrls: ['./deal-details.component.css']\n})\nexport class DealDetailsComponent implements OnInit {\n  //direct assignment APP_CONFIG=APP_CONFIG throws error 'cannot be named'\n  envCode = environment.envCode;//create a copy just for illustration\n  BASE_URL = environment.BASE_URL;//create a copy just for illustration\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { MyMaterialModule } from './my-material.module';\n\nimport { DealComponent } from './deal.component';\nimport { DealDetailsComponent } from './deal-details/deal-details.component';\nimport { environment, environments } from '../environment';\n\nvar components = [DealComponent, DealDetailsComponent]\n@NgModule({\n  declarations: components,\n  imports: [\n    MyMaterialModule\n  ],\n  exports: components\n})\nexport class DealModule {\n  /**Intializes environment specific api end points and other configurable items.\n   * @param envCode Typically DEV, PROD etc. Refer environment.ts of Deal library project.\n   * @param defaults Optional object to be passed to merge in the env config.\n   * @example \n   * 1. DealModule.configEnv('DEV')\n   * 2. DealModule.configEnv('DEV', {COMMON_API: 'https://someurl.com'})\n   */\n  public static configEnv(envCode:string, defaults?: Object) {\n    var validEnvCodes = Object.keys(environments);\n    if (!validEnvCodes.includes(envCode)) {\n      throw `Error initializing deal library. ${envCode} is not a valid environment code. Accepted values are ${validEnvCodes}.\\nRefer environment.ts file of library.`\n    }\n    Object.assign(environment, environments[envCode], defaults);\n  }\n}\n"]}