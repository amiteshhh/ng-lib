{"version":3,"sources":["ng://nglibdeal/lib/deal.service.ts","ng://nglibdeal/environment.ts","ng://nglibdeal/lib/deal.component.ts","ng://nglibdeal/lib/my-material.module.ts","ng://nglibdeal/lib/deal-details/deal-details.component.ts","ng://nglibdeal/lib/deal.module.ts"],"names":["DealService","Injectable","args","providedIn","APP_CONFIG","environment","DEV","envCode","BASE_URL","PROD","DealComponent","prototype","openSnackBar","this","_snackBar","open","ngOnInit","Component","selector","template","MatSnackBar","console","log","components","MatButtonModule","MatMenuModule","MatSnackBarModule","MatCardModule","MyMaterialModule","NgModule","imports","exports","DealDetailsComponent","DealModule","forRoot","defaults","Object","assign","ngModule","declarations","BrowserAnimationsModule"],"mappings":"8sBAAA,IAAAA,uBAECC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,uJAIZ,SAAAH,KCPF,IAAWI,EAAwB,GACxBC,EAAc,CACrBC,IAAK,CACDC,QAAS,MACTC,SAAU,uBAEdC,KAAM,CACFF,QAAS,OACTC,SAAU,yBCRlBE,GAwBEA,EAAAC,UAAAC,aAAA,WACEC,KAAKC,UAAUC,KAAK,uCAAwC,OAG9DL,EAAAC,UAAAK,SAAA,iCAxBDC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,UACVC,SAAU,+OASD,4FAbFC,EAAAA,eA6BTV,GAVE,SAAAA,EAAoBI,GAAAD,KAAAC,UAAAA,EAFpBD,KAAAN,QAAUH,EAAWG,QACrBM,KAAAL,SAAWJ,EAAWI,SAEpBa,QAAQC,IAAI,aAAclB,OCf1BmB,EAAa,CAACC,EAAAA,gBAAiBC,EAAAA,cAAeC,EAAAA,kBAAmBC,EAAAA,eACrEC,uBAACC,EAAAA,SAAQ3B,KAAA,CAAC,CACN4B,QAASP,EACTQ,QAASR,MAGbK,GALA,SAAAA,KCRA,IAAAI,GAcEA,EAAArB,UAAAK,SAAA,iCAXDC,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,kBACVC,SAAA,mjCAYFa,GALE,SAAAA,IAFAnB,KAAAN,QAAUH,EAAWG,QACrBM,KAAAL,SAAWJ,EAAWI,aCFpBe,EAAa,CAACb,EAAesB,GACjCC,GASgBA,EAAAC,QAAd,SAAsB3B,EAAc4B,GAElC,OADAC,OAAOC,OAAOjC,EAAYC,EAAYE,IAC/B,CACL+B,SAAUL,wBAZfJ,EAAAA,SAAQ3B,KAAA,CAAC,CACRqC,aAAchB,EACdO,QAAS,CACPU,EAAAA,wBACAZ,GAEFG,QAASR,MASXU,GAfA,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DealService {\n\n  constructor() { }\n}\n","export var APP_CONFIG: appConfig = {};//will be updated to environment val from below  \r\nexport var environment = {\r\n    DEV: {\r\n        envCode: 'DEV',\r\n        BASE_URL: 'http://deal.dev.com'\r\n    },\r\n    PROD: {\r\n        envCode: 'PROD',\r\n        BASE_URL: 'http://deal.prod.com'\r\n    }\r\n}\r\n\r\ninterface appConfig {\r\n    envCode?: 'DEV'|'PROD',\r\n    BASE_URL?: string,\r\n}","import { Component, OnInit } from '@angular/core';\nimport { APP_CONFIG } from '../environment'\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'dl-deal',\n  template: `\n    <h2>I am dl-deal component </h2>\n    <div>Environment: {{envCode}}</div>\n    <button mat-button (click)=\"openSnackBar()\">Click me!</button>\n    <div>Base Url: {{BASE_URL}}</div>\n    <p>\n      deal works!\n    </p>\n  `,\n  styles: [':host{border: 1px solid gray;display:block}']\n})\nexport class DealComponent implements OnInit {\n  //direct assignment APP_CONFIG=APP_CONFIG throws error 'cannot be named'\n  envCode = APP_CONFIG.envCode;//create a copy just for illustration\n  BASE_URL = APP_CONFIG.BASE_URL;//create a copy just for illustration\n  constructor(private _snackBar: MatSnackBar) { \n    console.log('APP_CONFIG', APP_CONFIG)\n  }\n  openSnackBar() {\n    this._snackBar.open('Hey its just a message from material', 'OK');\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\nvar components = [MatButtonModule, MatMenuModule, MatSnackBarModule, MatCardModule]\r\n@NgModule({\r\n    imports: components,\r\n    exports: components\r\n})\r\nexport class MyMaterialModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { APP_CONFIG } from '../../environment'\n\n@Component({\n  selector: 'dl-deal-details',\n  templateUrl: './deal-details.component.html',\n  styleUrls: ['./deal-details.component.css']\n})\nexport class DealDetailsComponent implements OnInit {\n  //direct assignment APP_CONFIG=APP_CONFIG throws error 'cannot be named'\n  envCode = APP_CONFIG.envCode;//create a copy just for illustration\n  BASE_URL = APP_CONFIG.BASE_URL;//create a copy just for illustration\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n\nimport {MyMaterialModule} from './my-material.module';\n\nimport { DealComponent } from './deal.component';\nimport { APP_CONFIG, environment } from '../environment';\nimport { DealDetailsComponent } from './deal-details/deal-details.component';\n\nvar components = [DealComponent, DealDetailsComponent]\n@NgModule({\n  declarations: components,\n  imports: [\n    BrowserAnimationsModule,\n    MyMaterialModule\n  ],\n  exports: components\n})\nexport class DealModule {\n  public static forRoot(envCode: any, defaults?: any): ModuleWithProviders {\n    Object.assign(APP_CONFIG, environment[envCode])\n    return {\n      ngModule: DealModule\n    };\n  }\n}\n"]}