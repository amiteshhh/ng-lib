{"version":3,"file":"nglibdeal.js.map","sources":["ng://nglibdeal/lib/deal.service.ts","ng://nglibdeal/environment.ts","ng://nglibdeal/lib/deal.component.ts","ng://nglibdeal/lib/my-material.module.ts","ng://nglibdeal/lib/deal-details/deal-details.component.ts","ng://nglibdeal/lib/deal.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DealService {\n\n  constructor() { }\n}\n","export interface envConfigI {\r\n    //interface exported to resolve build issue => projects/deal/src/lib/deal.component.ts(19,3): error TS4029: Public property 'environment' of exported class has or is using name 'envConfigI'\r\n    //from external module \"D:/dev/deal-lib/projects/deal/src/environment\" but cannot be named.\r\n    /** 'DEV'|'PROD' etc */\r\n    envCode?: string,\r\n    BASE_URL?: string,\r\n}\r\n\r\nexport var environment: envConfigI = {};//will be updated to environment val from below \r\nexport var environments = {\r\n    DEV: {\r\n        envCode: 'DEV',\r\n        BASE_URL: 'http://deal.dev.com'\r\n    },\r\n    PROD: {\r\n        envCode: 'PROD',\r\n        BASE_URL: 'http://deal.prod.com'\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\nimport { environment } from '../environment'\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'dl-deal',\n  template: `\n    <h2>I am dl-deal new component </h2>\n    <div>Environment: {{environment.envCode}}</div>\n    <button mat-button (click)=\"openSnackBar()\">Click me!</button>\n    <div>Base Url: {{environment.BASE_URL}}</div>\n    <p>\n      deal works each time!\n    </p>\n  `,\n  styles: [':host{border: 1px solid gray;display:block}']\n})\nexport class DealComponent implements OnInit {\n  environment = environment;\n  \n  // envCode = environment.envCode;\n  // BASE_URL = environment.BASE_URL;\n  constructor(private _snackBar: MatSnackBar) {\n  }\n  openSnackBar() {\n    this._snackBar.open('Hey its just a message from material', 'OK');\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\nvar components = [MatButtonModule, MatMenuModule, MatSnackBarModule, MatCardModule]\r\n@NgModule({\r\n    imports: components,\r\n    exports: components\r\n})\r\nexport class MyMaterialModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { environment } from '../../environment'\n\n@Component({\n  selector: 'dl-deal-details',\n  templateUrl: './deal-details.component.html',\n  styleUrls: ['./deal-details.component.css']\n})\nexport class DealDetailsComponent implements OnInit {\n  //direct assignment APP_CONFIG=APP_CONFIG throws error 'cannot be named'\n  envCode = environment.envCode;//create a copy just for illustration\n  BASE_URL = environment.BASE_URL;//create a copy just for illustration\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { MyMaterialModule } from './my-material.module';\n\nimport { DealComponent } from './deal.component';\nimport { DealDetailsComponent } from './deal-details/deal-details.component';\nimport { environment, environments } from '../environment';\n\nvar components = [DealComponent, DealDetailsComponent]\n@NgModule({\n  declarations: components,\n  imports: [\n    MyMaterialModule\n  ],\n  exports: components\n})\nexport class DealModule {\n  /**Intializes environment specific api end points and other configurable items.\n   * @param envCode Typically DEV, PROD etc. Refer environment.ts of Deal library project.\n   * @param defaults Optional object to be passed to merge in the env config.\n   * @example \n   * 1. DealModule.configEnv('DEV')\n   * 2. DealModule.configEnv('DEV', {COMMON_API: 'https://someurl.com'})\n   */\n  public static configEnv(envCode:string, defaults?: Object) {\n    var validEnvCodes = Object.keys(environments);\n    if (!validEnvCodes.includes(envCode)) {\n      throw `Error initializing deal library. ${envCode} is not a valid environment code. Accepted values are ${validEnvCodes}.\\nRefer environment.ts file of library.`\n    }\n    Object.assign(environment, environments[envCode], defaults);\n  }\n}\n"],"names":["components"],"mappings":";;;;;;;;;;AAAA;IAOE;KAAiB;;gBALlB,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;;sBAJD;CAEA;;;;;;;ACMA,IAAW,WAAW,GAAe,EAAE;;;AACvC,IAAW,YAAY,GAAG;IACtB,GAAG,EAAE;QACD,OAAO,EAAE,KAAK;QACd,QAAQ,EAAE,qBAAqB;KAClC;IACD,IAAI,EAAE;QACF,OAAO,EAAE,MAAM;QACf,QAAQ,EAAE,sBAAsB;KACnC;CACJ;;;;;;AClBD;;;IAsBE,uBAAoB,SAAsB;QAAtB,cAAS,GAAT,SAAS,CAAa;QAJ1C,gBAAW,GAAG,WAAW,CAAC;KAKzB;;;;IACD,oCAAY;;;IAAZ;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,sCAAsC,EAAE,IAAI,CAAC,CAAC;KACnE;;;;IAED,gCAAQ;;;IAAR;KACC;;gBAzBF,SAAS,SAAC;oBACT,QAAQ,EAAE,SAAS;oBACnB,QAAQ,EAAE,8QAQT;6BACQ,6CAA6C;iBACvD;;;;gBAdQ,WAAW;;IA6BpB,oBAAC;CA3BD;;;;;;ACJA;IAOI,UAAU,GAAG,CAAC,eAAe,EAAE,aAAa,EAAE,iBAAiB,EAAE,aAAa,CAAC;AACnF;IAAA;KAKC;;gBALA,QAAQ,SAAC;oBACN,OAAO,EAAE,UAAU;oBACnB,OAAO,EAAE,UAAU;iBACtB;;IAED,uBAAC;CALD;;;;;;ACRA;IAYE;;QAFA,YAAO,GAAG,WAAW,CAAC,OAAO,CAAC;;QAC9B,aAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;KACf;;;;IAEjB,uCAAQ;;;IAAR;KACC;;gBAZF,SAAS,SAAC;oBACT,QAAQ,EAAE,iBAAiB;oBAC3B,s+BAA4C;;iBAE7C;;;;IAUD,2BAAC;CAdD;;;;;;ACHA;IAQIA,YAAU,GAAG,CAAC,aAAa,EAAE,oBAAoB,CAAC;AACtD;IAAA;KAsBC;;;;;;;;;;;;;;;;;IAPe,oBAAS;;;;;;;;;IAAvB,UAAwB,OAAc,EAAE,QAAiB;;YACnD,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC7C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACpC,MAAM,sCAAoC,OAAO,8DAAyD,aAAa,6CAA0C,CAAA;SAClK;QACD,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC7D;;gBArBF,QAAQ,SAAC;oBACR,YAAY,EAAEA,YAAU;oBACxB,OAAO,EAAE;wBACP,gBAAgB;qBACjB;oBACD,OAAO,EAAEA,YAAU;iBACpB;;IAgBD,iBAAC;CAtBD;;;;;;;;;;;;;;"}
